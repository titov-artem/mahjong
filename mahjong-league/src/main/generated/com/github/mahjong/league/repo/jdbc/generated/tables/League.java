/*
 * This file is generated by jOOQ.
*/
package com.github.mahjong.league.repo.jdbc.generated.tables;


import com.fasterxml.jackson.databind.JsonNode;
import com.github.mahjong.common.jdbc.jooq.PostgresJSONJacksonJsonNodeBinding;
import com.github.mahjong.league.repo.jdbc.generated.Indexes;
import com.github.mahjong.league.repo.jdbc.generated.Keys;
import com.github.mahjong.league.repo.jdbc.generated.Public;
import com.github.mahjong.league.repo.jdbc.generated.tables.records.LeagueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class League extends TableImpl<LeagueRecord> {

    private static final long serialVersionUID = 2055911252;

    /**
     * The reference instance of <code>public.league</code>
     */
    public static final League LEAGUE = new League();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeagueRecord> getRecordType() {
        return LeagueRecord.class;
    }

    /**
     * The column <code>public.league.id</code>.
     */
    public final TableField<LeagueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('league_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.league.name</code>.
     */
    public final TableField<LeagueRecord, JsonNode> NAME = createField("name", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PostgresJSONJacksonJsonNodeBinding());

    /**
     * The column <code>public.league.description</code>.
     */
    public final TableField<LeagueRecord, JsonNode> DESCRIPTION = createField("description", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PostgresJSONJacksonJsonNodeBinding());

    /**
     * The column <code>public.league.admins</code>.
     */
    public final TableField<LeagueRecord, Long[]> ADMINS = createField("admins", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * Create a <code>public.league</code> table reference
     */
    public League() {
        this(DSL.name("league"), null);
    }

    /**
     * Create an aliased <code>public.league</code> table reference
     */
    public League(String alias) {
        this(DSL.name(alias), LEAGUE);
    }

    /**
     * Create an aliased <code>public.league</code> table reference
     */
    public League(Name alias) {
        this(alias, LEAGUE);
    }

    private League(Name alias, Table<LeagueRecord> aliased) {
        this(alias, aliased, null);
    }

    private League(Name alias, Table<LeagueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEAGUE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LeagueRecord, Long> getIdentity() {
        return Keys.IDENTITY_LEAGUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LeagueRecord> getPrimaryKey() {
        return Keys.LEAGUE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LeagueRecord>> getKeys() {
        return Arrays.<UniqueKey<LeagueRecord>>asList(Keys.LEAGUE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public League as(String alias) {
        return new League(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public League as(Name alias) {
        return new League(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(String name) {
        return new League(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(Name name) {
        return new League(name, null);
    }
}
