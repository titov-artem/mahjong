/*
 * This file is generated by jOOQ.
*/
package com.github.mahjong.league.repo.jdbc.generated.tables;


import com.github.mahjong.league.repo.jdbc.generated.Indexes;
import com.github.mahjong.league.repo.jdbc.generated.Keys;
import com.github.mahjong.league.repo.jdbc.generated.Public;
import com.github.mahjong.league.repo.jdbc.generated.tables.records.LeagueGameRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LeagueGame extends TableImpl<LeagueGameRecord> {

    private static final long serialVersionUID = 1966160184;

    /**
     * The reference instance of <code>public.league_game</code>
     */
    public static final LeagueGame LEAGUE_GAME = new LeagueGame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeagueGameRecord> getRecordType() {
        return LeagueGameRecord.class;
    }

    /**
     * The column <code>public.league_game.league_id</code>.
     */
    public final TableField<LeagueGameRecord, Long> LEAGUE_ID = createField("league_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.league_game.game_id</code>.
     */
    public final TableField<LeagueGameRecord, Long> GAME_ID = createField("game_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.league_game.player_ids</code>.
     */
    public final TableField<LeagueGameRecord, Long[]> PLAYER_IDS = createField("player_ids", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * Create a <code>public.league_game</code> table reference
     */
    public LeagueGame() {
        this(DSL.name("league_game"), null);
    }

    /**
     * Create an aliased <code>public.league_game</code> table reference
     */
    public LeagueGame(String alias) {
        this(DSL.name(alias), LEAGUE_GAME);
    }

    /**
     * Create an aliased <code>public.league_game</code> table reference
     */
    public LeagueGame(Name alias) {
        this(alias, LEAGUE_GAME);
    }

    private LeagueGame(Name alias, Table<LeagueGameRecord> aliased) {
        this(alias, aliased, null);
    }

    private LeagueGame(Name alias, Table<LeagueGameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEAGUE_GAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LeagueGameRecord> getPrimaryKey() {
        return Keys.LEAGUE_GAME_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LeagueGameRecord>> getKeys() {
        return Arrays.<UniqueKey<LeagueGameRecord>>asList(Keys.LEAGUE_GAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LeagueGame as(String alias) {
        return new LeagueGame(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LeagueGame as(Name alias) {
        return new LeagueGame(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LeagueGame rename(String name) {
        return new LeagueGame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LeagueGame rename(Name name) {
        return new LeagueGame(name, null);
    }
}
