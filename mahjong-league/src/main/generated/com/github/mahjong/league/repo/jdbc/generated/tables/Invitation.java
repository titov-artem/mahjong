/*
 * This file is generated by jOOQ.
*/
package com.github.mahjong.league.repo.jdbc.generated.tables;


import com.github.mahjong.league.repo.jdbc.generated.Indexes;
import com.github.mahjong.league.repo.jdbc.generated.Keys;
import com.github.mahjong.league.repo.jdbc.generated.Public;
import com.github.mahjong.league.repo.jdbc.generated.tables.records.InvitationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invitation extends TableImpl<InvitationRecord> {

    private static final long serialVersionUID = 282161469;

    /**
     * The reference instance of <code>public.invitation</code>
     */
    public static final Invitation INVITATION = new Invitation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationRecord> getRecordType() {
        return InvitationRecord.class;
    }

    /**
     * The column <code>public.invitation.id</code>.
     */
    public final TableField<InvitationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('invitation_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.invitation.league_id</code>.
     */
    public final TableField<InvitationRecord, Long> LEAGUE_ID = createField("league_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.invitation.player_id</code>.
     */
    public final TableField<InvitationRecord, Long> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.invitation.code</code>.
     */
    public final TableField<InvitationRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.invitation.created_by</code>.
     */
    public final TableField<InvitationRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.invitation.created_at</code>.
     */
    public final TableField<InvitationRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.invitation.expire_at</code>.
     */
    public final TableField<InvitationRecord, LocalDateTime> EXPIRE_AT = createField("expire_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.invitation.status</code>.
     */
    public final TableField<InvitationRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>public.invitation</code> table reference
     */
    public Invitation() {
        this(DSL.name("invitation"), null);
    }

    /**
     * Create an aliased <code>public.invitation</code> table reference
     */
    public Invitation(String alias) {
        this(DSL.name(alias), INVITATION);
    }

    /**
     * Create an aliased <code>public.invitation</code> table reference
     */
    public Invitation(Name alias) {
        this(alias, INVITATION);
    }

    private Invitation(Name alias, Table<InvitationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invitation(Name alias, Table<InvitationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVITATION_LEAGUE_ID_PLAYER_ID_STATUS_IDX, Indexes.INVITATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InvitationRecord, Long> getIdentity() {
        return Keys.IDENTITY_INVITATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InvitationRecord> getPrimaryKey() {
        return Keys.INVITATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InvitationRecord>> getKeys() {
        return Arrays.<UniqueKey<InvitationRecord>>asList(Keys.INVITATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invitation as(String alias) {
        return new Invitation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invitation as(Name alias) {
        return new Invitation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(String name) {
        return new Invitation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(Name name) {
        return new Invitation(name, null);
    }
}
