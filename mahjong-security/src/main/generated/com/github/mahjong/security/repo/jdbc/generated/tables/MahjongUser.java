/*
 * This file is generated by jOOQ.
*/
package com.github.mahjong.security.repo.jdbc.generated.tables;


import com.github.mahjong.security.repo.jdbc.generated.Indexes;
import com.github.mahjong.security.repo.jdbc.generated.Keys;
import com.github.mahjong.security.repo.jdbc.generated.Public;
import com.github.mahjong.security.repo.jdbc.generated.tables.records.MahjongUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MahjongUser extends TableImpl<MahjongUserRecord> {

    private static final long serialVersionUID = 871950683;

    /**
     * The reference instance of <code>public.mahjong_user</code>
     */
    public static final MahjongUser MAHJONG_USER = new MahjongUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MahjongUserRecord> getRecordType() {
        return MahjongUserRecord.class;
    }

    /**
     * The column <code>public.mahjong_user.login</code>.
     */
    public final TableField<MahjongUserRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.mahjong_user.password</code>.
     */
    public final TableField<MahjongUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * Create a <code>public.mahjong_user</code> table reference
     */
    public MahjongUser() {
        this(DSL.name("mahjong_user"), null);
    }

    /**
     * Create an aliased <code>public.mahjong_user</code> table reference
     */
    public MahjongUser(String alias) {
        this(DSL.name(alias), MAHJONG_USER);
    }

    /**
     * Create an aliased <code>public.mahjong_user</code> table reference
     */
    public MahjongUser(Name alias) {
        this(alias, MAHJONG_USER);
    }

    private MahjongUser(Name alias, Table<MahjongUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MahjongUser(Name alias, Table<MahjongUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAHJONG_USER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MahjongUserRecord> getPrimaryKey() {
        return Keys.MAHJONG_USER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MahjongUserRecord>> getKeys() {
        return Arrays.<UniqueKey<MahjongUserRecord>>asList(Keys.MAHJONG_USER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MahjongUser as(String alias) {
        return new MahjongUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MahjongUser as(Name alias) {
        return new MahjongUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MahjongUser rename(String name) {
        return new MahjongUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MahjongUser rename(Name name) {
        return new MahjongUser(name, null);
    }
}
