/*
 * This file is generated by jOOQ.
*/
package com.github.mahjong.security.repo.jdbc.generated.tables;


import com.github.mahjong.security.repo.jdbc.generated.Indexes;
import com.github.mahjong.security.repo.jdbc.generated.Keys;
import com.github.mahjong.security.repo.jdbc.generated.Public;
import com.github.mahjong.security.repo.jdbc.generated.tables.records.AuthTokenRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthToken extends TableImpl<AuthTokenRecord> {

    private static final long serialVersionUID = 681530849;

    /**
     * The reference instance of <code>public.auth_token</code>
     */
    public static final AuthToken AUTH_TOKEN = new AuthToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthTokenRecord> getRecordType() {
        return AuthTokenRecord.class;
    }

    /**
     * The column <code>public.auth_token.login</code>.
     */
    public final TableField<AuthTokenRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.auth_token.token</code>.
     */
    public final TableField<AuthTokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.auth_token.expire_at</code>.
     */
    public final TableField<AuthTokenRecord, LocalDateTime> EXPIRE_AT = createField("expire_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.auth_token</code> table reference
     */
    public AuthToken() {
        this(DSL.name("auth_token"), null);
    }

    /**
     * Create an aliased <code>public.auth_token</code> table reference
     */
    public AuthToken(String alias) {
        this(DSL.name(alias), AUTH_TOKEN);
    }

    /**
     * Create an aliased <code>public.auth_token</code> table reference
     */
    public AuthToken(Name alias) {
        this(alias, AUTH_TOKEN);
    }

    private AuthToken(Name alias, Table<AuthTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthToken(Name alias, Table<AuthTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTH_TOKEN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthTokenRecord> getPrimaryKey() {
        return Keys.AUTH_TOKEN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthTokenRecord>>asList(Keys.AUTH_TOKEN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthToken as(String alias) {
        return new AuthToken(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthToken as(Name alias) {
        return new AuthToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthToken rename(String name) {
        return new AuthToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthToken rename(Name name) {
        return new AuthToken(name, null);
    }
}
